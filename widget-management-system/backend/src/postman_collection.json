{
  "info": {
    "name": "Widget API Collection",
    "_postman_id": "widget-api-collection",
    "description": "Postman collection for testing the WidgetController API endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create Widget",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Sample Widget\",\n  \"description\": \"A sample widget for testing purposes.\",\n  \"price\": 99.99\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/widgets",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains widget details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.name).to.equal('Sample Widget');",
              "    pm.expect(jsonData.description).to.equal('A sample widget for testing purposes.');",
              "    pm.expect(jsonData.price).to.equal(99.99);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "List All Widgets",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/widgets",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Widget by Name",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/widgets/Sample Widget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "Sample Widget"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains widget details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.name).to.equal('Sample Widget');",
              "    pm.expect(jsonData.description).to.be.a('string');",
              "    pm.expect(jsonData.price).to.be.a('number');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update Widget",
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"description\": \"Updated description for the sample widget.\",\n  \"price\": 149.99\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/v1/widgets/Sample Widget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "Sample Widget"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response reflects updated widget\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData.name).to.equal('Sample Widget');",
              "    pm.expect(jsonData.description).to.equal('Updated description for the sample widget.');",
              "    pm.expect(jsonData.price).to.equal(149.99);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete Widget",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/widgets/Sample Widget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "Sample Widget"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.test(\"Response has no content\", function () {",
              "    pm.expect(pm.response.text()).to.be.empty;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get Non-Existent Widget",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/v1/widgets/NonExistentWidget",
          "host": ["{{baseUrl}}"],
          "path": ["api", "widgets", "NonExistentWidget"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Response contains error message\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.equal('Widget not found');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "description": "Base URL for the Widget API"
    }
  ]
}